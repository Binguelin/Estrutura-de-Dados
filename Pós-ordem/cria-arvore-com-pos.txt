// Esse algoritimo cria uma arvore binária com custura
// a partir de um percurso em pós ordem e seus suc e precedessores.

// Suc(T) e Prede(T) serão funções nas quais retornam o Sucessor e o Predecessor do
// nó T respectivamente.

//?vazio(X): retorna 1 se X é um vetor vazio e 0 caso contrário
//Inverte(X): Inverte os termos do vetor X, tornando X[n-i]=X[i]

cria-arvore-com-pos(pt, pos-ordem[]):					// Primeiramente R será vazio
if(len(pos-ordem[])==0)									// Caminho em pré-ordem igual a zero
{
	return pt
}
else
{
	Inverte(pos-ordem)
	CREATE novo-no										//Adição do nó
	novo-no.dir = NULL
	novo-no.esq = NULL
	novo-no.costura.dir = -1
	novo-no.costura.esq = -1
	novo-no.info = pos-ordem[0]
	pt = novo-no
	REMOVE(pos-ordem[0])
	if(Suc(pt)==pos-ordem[0])							//percorre pela direita
	{
		pt.costura = 0
		cria-arvore-com-pos(pt.dir, pos-ordem[])
	}
	if(Prede(pt)==pos-ordem[0])							//Percorre pela esquerda
	{
		pt.costura.esq = 0
		cria-arvore-com-pos(pt.esq, pos-ordem[])
	}
	if(pt.costura.dir == -1)
	{
		pt.costura.dir == 1
		pt.dir = Suc(pt)
	}
	if(pt.custura.esq == -1)							//Costura os nós
	{
		pt.costura.esq == 1
		pt.esq = Prede(pt)
	}
	
}